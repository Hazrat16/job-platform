name: Build and Deploy Job Platform Backend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  PRIVATE_KEY: ${{ secrets.CD_VPS_SSH_KEY }}
  INSTANCE_IP: ${{ vars.CD_VPS_HOST }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t job-platform-api:latest .

      - name: Tag Docker image
        run: |
          docker tag job-platform-api:latest ${{ secrets.DOCKER_USERNAME }}/job-platform-api:latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/job-platform-api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose on runner
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Copy deployment files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ${{ secrets.CD_VPS_USER }}
          key: ${{ env.PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "~/job-platform-api"

      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ${{ secrets.CD_VPS_USER }}
          key: ${{ env.PRIVATE_KEY }}
          script: |
            cd ~/job-platform-api
            docker-compose down
            docker-compose pull
            docker-compose up -d
            docker image prune -f
